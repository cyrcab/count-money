// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id             Int                     @id @default(autoincrement())
  email          String                  @unique
  lastname       String?
  firstname      String?
  password       String
  role           Role                    @relation(fields: [roleId], references: [id])
  roleId         Int                     @default(2)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  UserRSS_filter UserRSS_filter[]
  Article        Article[]
  FavoriteCrypto UserHasFavoriteCrypto[]
  RefreshToken   RefreshToken[]
}

model Article {
  id          Int      @id @default(autoincrement())
  titre       String
  description String   @db.VarChar(10000)
  url         String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model UserRSS_filter {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  RSS_filter   RSS_filter @relation(fields: [RSS_filterId], references: [id], onDelete: Cascade)
  RSS_filterId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([userId, RSS_filterId])
}

model RSS_filter {
  id             Int              @id @default(autoincrement())
  name           String
  url            String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserRSS_filter UserRSS_filter[]
}

model UserHasFavoriteCrypto {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  crypto    Crypto   @relation(fields: [cryptoId], references: [id])
  cryptoId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, cryptoId])
}

model Crypto {
  id         Int                     @id @default(autoincrement())
  name       String
  label      String                  @unique
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  UserCrypto UserHasFavoriteCrypto[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}
